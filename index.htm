<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>Subway Simulation with SVG.js library</title>
<style type="text/css">
	#locationPanel
	{
		width: 300px;
		background-color: black;
	}

	.locationPanelItem{
		color: white;
		padding: 5px;
		font-family: Arial, Helvetica, sans-serif;
	}

	.locationPanelItemNumber
	{
		color: #ffdd00;
		display: inline;
		font-weight: bold;
	}
</style>


<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/svg.js/2.7.1/svg.js"></script>
<script type="text/javascript">

var trains = [];
//x,y
var stations = [
	[5,50], [30,50], [150,50], [350,200], [500,200], [600,300]
];

$(document).ready(function(){

	var draw = SVG('drawing').size(750, 400);

	var polyline = draw.polyline(stations).fill('none').stroke({ width: 10, color: "#4286f4" });

	DrawStations(stations, draw);

	SetTrain(5, 50, draw, 111, '#ff9933');
	SetTrain(5, 50, draw, 222, '#00cc00');
	SetTrain(5, 50, draw, 333, '#0000ff');
	SetTrain(5, 50, draw, 444, '#cc3300');
	SetTrain(5, 50, draw, 555, '#9966ff');

	setInterval(UpdateLocationPanel, 1000)

	$("#btnMoveTrain").on("click", function(){

		setInterval(function(){
			// For each train do the same.

			$.each(trains, function( index, value ) {

				if(value.ready() && !TrainOnNextStation(CalculateNextStation(value), value.reverse))
				{
					value.onStationTime = 0;
					value.MoveNextStation();
				}

			});

		}, 1000);

	});
});

function TrainOnNextStation(nextStation, reverse)
{
	var val = false;
	if(nextStation != null)
	{
		if(
			(nextStation[0] == stations[stations.length-1][0] && stations[stations.length-1][1] == nextStation[1])
			||
			(nextStation[0] == stations[0][0] && stations[0][1] == nextStation[1])
		)
		{
			// Last/first station allows many trains
			val = false;
		}
		else
		{
			for(var i=0;i<=trains.length-1;i++)
				{
					if(
						(trains[i].station[0] == nextStation[0] && trains[i].station[1] == nextStation[1])
						&& (trains[i].reverse == reverse)
						)
					{
						val = true;
					}
				}
			}
		}

	return val;
}

function CalculateNextStation(value)
{
	var val = null;

	if(value.station[0] == 0 && value.station[1] == 0)
	{
		// Station 1
		val = [stations[0][0], stations[0][1]];
	}
	else
	{
		if(value.reverse)
		{
			val = SearchPreviousStation(value.station[0], value.station[1]);
		}
		else
		{
			val = SearchNextStation(value.station[0], value.station[1]);
		}
	}

	return val;
}

function SetTrain(x, y, draw, trainId, color)
{
	var shape = draw.circle(20).fill(color).move(x-10, y-10);

	//var text = draw.text('SVG.JS').move(10, 10).font({ size: 11 }).fill({ color: '#fff' });
	//text.addTo(shape);



	var newTrain = {
		id: trainId,
		shape: shape,
		onStation: false,
		station: [0,0],
		onStationTime: 0,
		ready: function(){
			var val = true;
			
			for(var i=0;i<=stations.length-1;i++)
			{
				if(stations[i][0] == this.shape.cx() && stations[i][1] == this.shape.cy())
				{
					this.onStation = true;
					this.onStationTime = this.onStationTime + 1000;
				}
			}

			if(this.onStationTime >= 2000 && this.onStation)
			{
				val = true;
			}
			else
			{
				val = false;
			}
			return val;
		},
		reverse: false,
		MoveNextStation: function()
		{
			if(this.station[0] == 0 && this.station[1] == 0)
			{
				// Station 1
				this.shape.animate().move(stations[0][0]-10, stations[0][1]-10);
				this.station = [stations[0][0], stations[0][1]];
			}
			else
			{
				var nextPos = null;
				if(this.reverse)
				{
					nextPos = SearchPreviousStation(this.station[0], this.station[1]);
					if(nextPos == null)
					{
						this.reverse = false;
					}
				}
				else
				{
					nextPos = SearchNextStation(this.station[0], this.station[1]);
					if(nextPos == null)
					{
						this.reverse = true;
					}
				}
				
				if(nextPos != null)
				{
					this.shape.animate(2000).move(nextPos[0]-10, nextPos[1]-10);
					this.station = nextPos;
				}

			}
		}
	}
	trains.push(newTrain);
}

function SelectTrain(trainId)
{
	var finded = false;
	for(var i=0;i<=trains.length-1;i++)
	{
		if(trains[i].id == trainId)
		{
			finded = true;
		}
	}

	alert(finded);
}

function UpdateLocationPanel()
{
	$("#locationPanel").text("");
	$.each(trains, function( index, value ) {
		
		$("#locationPanel").append("<div class=\"locationPanelItem\" onclick=\"SelectTrain("+
		value.id+")\"><div class=\"locationPanelItemNumber\">Train nÂ°</div>: " + value.id + ", Station: " 
		+ value.station[0] + " and " + value.station[1] + "</div>");
	});
}

function SearchNextStation(x, y)
{
	var nextPos = null;
	for(var i=0;i<=stations.length-1;i++)
	{
		if(stations[i][0] == x && stations[i][1] == y)
		{
			if(i+1 == stations.length)
			{
				// Final

			}
			else
			{
				nextPos = [stations[i+1][0], stations[i+1][1]];
			}
		}
	}
	return nextPos;
}

function SearchPreviousStation(x, y)
{
	var nextPos = null;
	for(var i=stations.length-1;i>=0;i--)
	{
		if(stations[i][0] == x && stations[i][1] == y)
		{
			if(i-1 == -1)
			{
				// Final

			}
			else
			{
				nextPos = [stations[i-1][0], stations[i-1][1]];
			}
		}
	}
	return nextPos;
}

function MoveTrain(stations, draw, train)
{
	for(var i=0;i<=stations.length-1;i++)
	{
		train.shape.animate().move(stations[i][0]-10, stations[i][1]-10);
	}
}

function DrawStations(stations, draw)
{
	for(var i=0;i<=stations.length-1;i++)
	{
		var circle = draw.circle(10).move(stations[i][0]-5, stations[i][1]-5).fill({ color: 'black' });
		var label = "";
		if(stations[i][0] == stations[0][0] && stations[i][1] == stations[0][1])
		{
			label = "D";
		}
		else
		{
			label = "Station: " + stations[i][0] + " and " + stations[i][1];
		}
		var text = draw.text(label);
		text.dx(stations[i][0]);
		text.dy(stations[i][1]);
	}
}


</script>

</head>
<body>

<div id="drawing"></div>

<div id="locationPanel">

</div>
<div class="locationPanelItem">asd</div>
<br/>
<!--<input type="text" id="selectedTrainId"/>
<input id="btnStopStart" value="Stop" type="button"/>
<br/>-->
<input id="btnMoveTrain" value="Start Simulation" type="button"/>
</body>
</html>